{"version":3,"sources":["../index.js"],"names":[],"mappings":"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","file":"index.js","sourcesContent":["var AWS = require('aws-sdk');\nvar execSync = require('child_process').execSync;\n\nexport let InstanceStatus = {\n  Pending: 0,\n  Running: 16,\n  ShuttingDown: 32,\n  Terminated: 48,\n  Stopping: 64,\n  Stopped: 80,\n};\n\nexport function instanceStatusToString(instanceStatus) {\n  switch (instanceStatus) {\n    case InstanceStatus.Pending:\n      return 'pending';\n    case InstanceStatus.Running:\n      return 'running';\n    case InstanceStatus.ShuttingDown:\n      return 'shutting down';\n    case InstanceStatus.Terminated:\n      return 'terminated';\n    case InstanceStatus.Stopping:\n      return 'stopping';\n    case InstanceStatus.Stopped:\n      return 'stopped';\n  }\n  return 'unknown';\n}\n\n/**\n * Wraps the AWS JS SDK to provides a super simple ES6 promise based API for working with\n * AWS' EC2.  If you want to do anything complex you should be using the AWS JS SDK directly:\n * http://docs.aws.amazon.com/AWSJavaScriptSDK/latest/AWS/EC2.html#describeInstances-property\n */\nexport default class EC2Helper {\n\n  // Constructs an EC2Helper object\n  // @param config A configuration object like so:\n  // {\n  //   region: 'us-west-2',\n  //   accessKeyId: '<your-access-key>',\n  //   secretAccessKey: '<your-secret-key>',\n  // }\n  constructor(config) {\n    this.config = config || {};\n    this.ec2 = new AWS.EC2(this.config);\n  }\n\n  /**\n   * Executes the specified command on the specified host and waits until it ends.\n   */\n  executeCommand(host, pemPath, command, username = 'ubuntu') {\n    execSync(`ssh -o \"StrictHostKeyChecking no\" -i ${pemPath} ${username}@${host} \"${command}\"`);\n  }\n\n  /**\n   * Starts a single instance and resolves a promise upon success with the following data:\n   * {\n   *   instanceId: 'i-something',\n   *   host: 'some-host',\n   * }\n   * The promise is not resolved until the instance is actually started.\n   */\n  runInstance(imageId, instanceType, keyName, securityGroupId) {\n    return new Promise((resolve, reject) => {\n      var params = {\n        ImageId: imageId,\n        MaxCount: 1,\n        MinCount: 1,\n        InstanceType: instanceType,\n        KeyName: keyName,\n        SecurityGroupIds: [securityGroupId],\n        DryRun: false,\n      };\n      this.ec2.runInstances(params, (err, data) => {\n        if (err) {\n          reject(err);\n        } else {\n          let instanceId = data.Instances[0].InstanceId;\n          let intervalId = setInterval(() => {\n            this.describeInstances(instanceId).then(instances => {\n              let instance = instances[0];\n              if (instance.instanceStatus === InstanceStatus.Running) {\n                resolve({\n                  instanceId,\n                  host: instance.host,\n                });\n                clearInterval(intervalId);\n              } else if (instance.instanceStatus === InstanceStatus.Pending) {\n                // Continue to next interval timeout\n                return;\n              } else {\n                reject('Instance was started but status is: ' + instance.instanceStatus);\n              }\n            });\n          }, 1000);\n        }\n      });\n    });\n  }\n\n  /**\n   * Stops the specified instance ID and resolves a promise when done issuing the command\n   */\n  terminateInstance(instanceId) {\n    return new Promise((resolve, reject) => {\n      var params = {\n        InstanceIds: [instanceId],\n        DryRun: false,\n      };\n\n      this.ec2.terminateInstances(params, (err, data) => {\n        if (err) {\n          reject(err);\n        } else {\n          let intervalId = setInterval(() => {\n            this.describeInstanceStatus(instanceId).then(instanceStatus => {\n              if (instanceStatus === InstanceStatus.Terminated) {\n                resolve(data);\n                clearInterval(intervalId);\n              } else if (instanceStatus === InstanceStatus.ShuttingDown) {\n                // Continue to next interval timeout\n                return;\n              } else {\n                reject('Instance termination was done but status is: ' + instanceStatus);\n              }\n            });\n          }, 1000);\n        }\n      });\n    });\n  }\n\n  /**\n   * Obtains the specified instance status and resolve with a value\n   * which can be used in comparison with one of the InstanceStatus values.\n  */\n  describeInstanceStatus(instanceId) {\n    return new Promise((resolve, reject) => {\n      var params = {\n        DryRun: false,\n        // true to include even non running\n        IncludeAllInstances: true,\n        InstanceIds: [instanceId],\n        NextToken: null,\n      };\n      this.ec2.describeInstanceStatus(params, (err, data) => {\n        if (err) {\n          reject(err);\n        } else {\n          resolve(data.InstanceStatuses[0].InstanceState.Code);\n        }\n      });\n    });\n  }\n\n  /**\n   * Describes all fo the instances which are running\n   * Returns an array like this:\n   * [{\n   *   instanceId: '',\n   *   instanceStatus: 16,\n   *   statusName: 'running',\n   *   host: 'some-host'\n   * }, ...]\n   */\n  describeInstances(maxResultsOrInstanceId = 32) {\n    var params = {\n      DryRun: false,\n    };\n    if (typeof maxResultsOrInstanceId === 'string') {\n      params.InstanceIds = [maxResultsOrInstanceId];\n    } else {\n      params.MaxResults = maxResultsOrInstanceId;\n    }\n\n    return new Promise((resolve, reject) => {\n      this.ec2.describeInstances(params, function(err, data) {\n        if (err) {\n          reject(err);\n        } else {\n          let instances = data.Reservations.reduce((list, reservation) => {\n            return list.concat(reservation.Instances.map((instance) => {\n              return {\n                instanceId: instance.InstanceId,\n                instanceStatus: instance.State.Code,\n                statusName: instance.State.Name,\n                host: instance.PublicDnsName,\n              };\n            }));\n          }, []);\n          resolve(instances);\n        }\n      });\n    });\n  }\n}\n"]}